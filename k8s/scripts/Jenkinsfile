  
 pipeline {
  agent none
        parameters {
        string(name: 'Env', defaultValue: 'poc', description: 'Current environment')
        string(name: 'Environment', defaultValue: 'Development', description: 'Running environment')
        string(name: 'Eks', defaultValue: 'eks', description: 'eks database')
        string(name: 'cicdPath', defaultValue: 'cicd', description: 'CICD directory path')
        string(name: 'NameSpace', defaultValue: 'test-deploy', description: 'kubernetes namespace')
        string(name: 'ProjectPath', defaultValue: 'user', description: 'Project path')     
                }
   
  stages {
    stage('get code from source code') {
       agent {
                label 'master'
            }
      
      steps {
                sh 'ls '
                //cleanWs()
                //sh 'ls'
              
      }
       post {
                always {
                    sh "echo Pull source code complete"
                }
           }
    }          
          
       stage('docker build') {
       agent {
                label 'master'
            }
      
      steps {

               dir(path: "${params.ProjectPath}/scripts") {
  
                sh 'pwd'
                 //sh 'docker build -t eoludotun/userservice:$BUILD_NUMBER .'     
                     
                }
      }
       post {
                always {
                    sh 'echo "Docker build  completed"'
                }
           }
         
    }     
          

        stage('Updating variables') {
            agent {
                label 'master'
            }
          steps {
            dir(path: "${params.ProjectPath}/scripts") {
              sh 'ls'
  
              sh "sed -i 's|eoludotun/userservice:00|eoludotun/userservice:$BUILD_NUMBER|' application.yaml"
             // sh "sed -i 's|8050|80|' application.yaml"
              
            
            //sh "sed -i 's|eoludotun/userservice:00|eoludotun/userservice:$BUILD_NUMBER|' application.yaml
            sh 'ls'
             sh 'cat application.yaml'
            
            }
          }
            post {
            always {
                     sh 'echo "Updating variables  completed"'
                   }
           }                           
            
          }
     

        stage('Deploy to kubernetes cluster') {
            agent {
                label 'master'
            }
          steps {
            dir(path: "${params.ProjectPath}/scripts") {
            sh 'echo "starting Deploy"'
              sh 'cat application.yaml'
              withCredentials([kubeconfigFile(credentialsId: 'poc-eks-kubernetes', variable: 'KUBECONFIG')]) {
                
                echo "*******************************************************************************"
                sh "kubectl --kubeconfig $KUBECONFIG apply -f ./application.yaml --record"
                echo "*******************************************************************************"
                echo "===========================Verify if deployment is successful =================="
                sh "kubectl --kubeconfig $KUBECONFIG rollout status deployment user-deployment -n ${params.NameSpace}"
                sh "kubectl --kubeconfig $KUBECONFIG get deployments -n ${params.NameSpace} -o wide"
                echo "*******************************************************************************"
                  
            }

          }
          }
        

      }
    

    stage('Deploy') {
      when {
        branch 'master'
      }
      steps {
        echo 'Deploying the application....'
        input(message: 'Deploy?', ok: 'Yes')
      }
    }
  }
  
 }
    

  

