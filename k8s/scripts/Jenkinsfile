  
 pipeline {
  agent none
        parameters {
        string(name: 'Env', defaultValue: 'poc', description: 'Current environment')
        string(name: 'Environment', defaultValue: 'Development', description: 'Running environment')
        string(name: 'Eks', defaultValue: 'eks', description: 'eks database')
        string(name: 'cicdPath', defaultValue: 'cicd', description: 'CICD directory path')
        string(name: 'NameSpace', defaultValue: 'test-deploy', description: 'kubernetes namespace')
        string(name: 'ProjectPath', defaultValue: 'user', description: 'Project path')     
                }
   
  stages {
    stage('get code from source code') {
       agent {
                label 'master'
            }    
      steps {
                sh 'ls '
                cleanWs()         
      }
       post {
                always {
                    sh "echo Pull source code complete"
                }
           }
      }          
          
       stage('docker build') {
            agent {
                label 'master'
            }
      steps {
          dir('k8s') {
              sh 'docker build -t userservice:$BUILD_NUMBER .'            
                }
      }
       post {
                always {
                    sh 'echo "Docker build  completed"'
                }
           }
         
      }     
        stage('Updating variables') {
            agent {
                label 'master'
            }

          steps {

            withDockerRegistry(credentialsId: 'registry', url: 'https://hub.docker.com/') {
             sh "docker push eoludotun/userservice:$BUILD_NUMBER"
            }
   
              
          }
            post {
            always {
                     sh 'echo "Updating variables  completed"'
                   }
           }                           
            
          }
        stage('Deploy to kubernetes cluster') {
            agent {
                label 'master'
            }
          steps {
            dir('k8s/scripts') {
            
              echo "*******************************************************************************"
              sh 'echo "before changing image in Deploy"'
              sh 'cat application.yaml'
              echo "*******************************************************************************"
               //sh "sed -i 's|eoludotun/userservice:00|eoludotun/userservice:$BUILD_NUMBER|' application.yaml
              sh "sed -i 's|eoludotun/userservice:00|userservice:$BUILD_NUMBER|' application.yaml"
              withCredentials([kubeconfigFile(credentialsId: 'poc-eks-kubernetes', variable: 'KUBECONFIG')]) {
                
                echo "*******************************************************************************"
                sh 'cat application.yaml'
                sh 'echo "After changing image in Deploy"'
                sh "kubectl --kubeconfig $KUBECONFIG apply -f ./application.yaml --record"
                echo "*******************************************************************************"
                echo "===========================Verify if deployment is successful =================="
               // sh "kubectl --kubeconfig $KUBECONFIG rollout status deployment user-deployment -n ${params.NameSpace}"
                //sh "kubectl --kubeconfig $KUBECONFIG get deployments -n ${params.NameSpace} -o wide"
                echo "*******************************************************************************"
                  
            }

          }
          }
        

      }
    

    stage('Deploy') {
      agent {
                docker { image 'maven:3-alpine' }
            } 
      steps {
        sh 'mvn --version'
      }
    }
  }
  
 }
    

  

